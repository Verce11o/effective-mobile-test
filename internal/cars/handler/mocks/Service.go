// Code generated by mockery v2.42.2. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/Verce11o/effective-mobile-test/internal/domain"

	mock "github.com/stretchr/testify/mock"

	models "github.com/Verce11o/effective-mobile-test/internal/models"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// CreateCar provides a mock function with given fields: ctx, input
func (_m *Service) CreateCar(ctx context.Context, input domain.CreateCarsRequest) error {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for CreateCar")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.CreateCarsRequest) error); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteCar provides a mock function with given fields: ctx, carID
func (_m *Service) DeleteCar(ctx context.Context, carID int) error {
	ret := _m.Called(ctx, carID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCar")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, carID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetCars provides a mock function with given fields: ctx, input
func (_m *Service) GetCars(ctx context.Context, input domain.GetCarsRequest) (models.CarList, error) {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for GetCars")
	}

	var r0 models.CarList
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.GetCarsRequest) (models.CarList, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.GetCarsRequest) models.CarList); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Get(0).(models.CarList)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.GetCarsRequest) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCar provides a mock function with given fields: ctx, carID, input
func (_m *Service) UpdateCar(ctx context.Context, carID int, input domain.UpdateCarsRequest) error {
	ret := _m.Called(ctx, carID, input)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCar")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, domain.UpdateCarsRequest) error); ok {
		r0 = rf(ctx, carID, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
