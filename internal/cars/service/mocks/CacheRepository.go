// Code generated by mockery v2.42.2. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/Verce11o/effective-mobile-test/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// CacheRepository is an autogenerated mock type for the CacheRepository type
type CacheRepository struct {
	mock.Mock
}

// DeleteCarList provides a mock function with given fields: ctx
func (_m *CacheRepository) DeleteCarList(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCarList")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetCarList provides a mock function with given fields: ctx, hash
func (_m *CacheRepository) GetCarList(ctx context.Context, hash string) (*models.CarList, error) {
	ret := _m.Called(ctx, hash)

	if len(ret) == 0 {
		panic("no return value specified for GetCarList")
	}

	var r0 *models.CarList
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.CarList, error)); ok {
		return rf(ctx, hash)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.CarList); ok {
		r0 = rf(ctx, hash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.CarList)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, hash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetByIDCtx provides a mock function with given fields: ctx, cursor, cars
func (_m *CacheRepository) SetByIDCtx(ctx context.Context, cursor string, cars models.CarList) error {
	ret := _m.Called(ctx, cursor, cars)

	if len(ret) == 0 {
		panic("no return value specified for SetByIDCtx")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, models.CarList) error); ok {
		r0 = rf(ctx, cursor, cars)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewCacheRepository creates a new instance of CacheRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCacheRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *CacheRepository {
	mock := &CacheRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
